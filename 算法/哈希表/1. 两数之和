1. 两数之和


题解：数组是无序的，遍历的过程中，判断我需要的值在不在hash里，


暴力法

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        #暴力
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j] == target:
                    return [i,j]



class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        #非排序，哈希，返回的是索引
        length = len(nums)

        #哈希
        s = {}
        for i in range(0,length):

            if target-nums[i] in s.keys():
                #说明查到了
                return [i,s[target-nums[i]]]
            else:
                #此处应该charade是nums[i],而不应该是target-nums[i],否则nums[i]就丢失了
                s[nums[i]]=i
        return []



class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        ret = []
        length = len(nums)
        #哈希
        h = {}
        for i in range(0,length):
            #我需要的在不在hash里呀？
            if target-nums[i] in h:
                return [i,h[target-nums[i]]]
            #我是啥，我的位置在
            else:
                h[nums[i]]=i
