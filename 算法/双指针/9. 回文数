9. 回文数


class Solution:
    def isPalindrome(self, x: int) -> bool:
        #过滤特殊情况
        if (x < 0 or (x % 10 == 0 and x != 0)):
            return False

        r=0
 
        #如何得到反转后的数字
        #如何知道翻转一半-当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了
        while x>r:
            #获取每一位上的数字
            i = x%10 
            #要记住，如何获取翻转后的整数，
            r=r*10+i
            x=x//10

        print(x)
        print(r)
        #// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。
        #// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，
        #// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。r的最后一位数字就是原先最中间的数字
        #如果长度是偶数，x==r
        #如果长度是奇数，x == r // 10
        return x == r or x == r // 10
        
